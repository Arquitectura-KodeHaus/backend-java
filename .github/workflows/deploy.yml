name: Build → Staging → (Approval) → Prod | backend-java

on:
  push:
    branches: ["prod"]          # dispara con push a prod
  pull_request:
    branches: ["prod"]          # y también con PR hacia prod (solo llega hasta staging)
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-backend-java
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write

jobs:
  build_and_push:
    name: Build & Push image(s)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Build local (una vez)
      - name: Build Docker image (local)
        run: docker build -t local/backend-java:${{ github.sha }} .

      # ===== STAGING (kodehaus-test) =====
      - name: Auth to Google Cloud (STAGING via OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ vars.DEPLOY_SA }}
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Setup gcloud (STAGING)
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry (STAGING)
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Tag & Push (STAGING)
        run: |
          STG_IMG="${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/backend-java"
          docker tag local/backend-java:${{ github.sha }} "$STG_IMG:${{ github.sha }}"
          docker tag local/backend-java:${{ github.sha }} "$STG_IMG:staging"
          docker push "$STG_IMG:${{ github.sha }}"
          docker push "$STG_IMG:staging"

      # ===== PROD (kodehaus-prod) — solo en push, no en PR =====
      - name: Auth to Google Cloud (PROD via OIDC)
        if: github.event_name != 'pull_request'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_PROD }}
          service_account: ${{ vars.DEPLOY_SA_PROD }}
          project_id: ${{ vars.GCP_PROJECT_ID_PROD }}

      - name: Setup gcloud (PROD)
        if: github.event_name != 'pull_request'
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry (PROD)
        if: github.event_name != 'pull_request'
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Tag & Push (PROD)
        if: github.event_name != 'pull_request'
        run: |
          PROD_IMG="${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID_PROD }}/${{ vars.ARTIFACT_REPO }}/backend-java"
          docker tag local/backend-java:${{ github.sha }} "$PROD_IMG:${{ github.sha }}"
          docker tag local/backend-java:${{ github.sha }} "$PROD_IMG:latest"
          docker push "$PROD_IMG:${{ github.sha }}"
          docker push "$PROD_IMG:latest"

  deploy_staging:
    name: Deploy to STAGING
    needs: [build_and_push]
    runs-on: ubuntu-latest
    environment: staging          # este ambiente NO debe requerir aprobación
    steps:
      - name: Auth to Google Cloud (STAGING via OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ vars.DEPLOY_SA }}
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Deploy Cloud Run (staging)
        id: deploy_stg
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ vars.SERVICE_STAGING }}
          image: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/backend-java:${{ github.sha }}
          region: ${{ vars.GCP_REGION }}
          flags: >
            --allow-unauthenticated
            --service-account=${{ vars.RUNTIME_SA }}
            --set-env-vars=GOOGLE_CLOUD_PROJECT=${{ vars.GCP_PROJECT_ID }}

      - name: Smoke test (staging)
        shell: bash
        run: |
          URL="${{ steps.deploy_stg.outputs.url }}"
          echo "Staging URL: $URL"
          code=$(curl -s -o /dev/null -w '%{http_code}' "$URL/healthz" || true)
          [[ "$code" == "200" ]] || { echo "Smoke test falló ($code)"; exit 1; }
          echo "Staging OK: $URL" >> "$GITHUB_STEP_SUMMARY"

  deploy_production:
    name: Deploy to PRODUCTION (QA approval)
    needs: [deploy_staging]
    if: github.event_name != 'pull_request'   # sólo tras push o manual
    runs-on: ubuntu-latest
    environment: production                    # aquí configuras Required reviewers: QA
    steps:
      - name: Auth to Google Cloud (PROD via OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_PROD }}
          service_account: ${{ vars.DEPLOY_SA_PROD }}
          project_id: ${{ vars.GCP_PROJECT_ID_PROD }}

      - name: Deploy Cloud Run (prod)
        id: deploy_prod
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ vars.SERVICE_PROD }}
          image: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID_PROD }}/${{ vars.ARTIFACT_REPO }}/backend-java:${{ github.sha }}
          region: ${{ vars.GCP_REGION }}
          flags: >
            --allow-unauthenticated
            --service-account=${{ vars.RUNTIME_SA_PROD }}
            --set-env-vars=GOOGLE_CLOUD_PROJECT=${{ vars.GCP_PROJECT_ID_PROD }}

      - name: Publica URL de producción
        shell: bash
        run: |
          echo "PROD URL: ${{ steps.deploy_prod.outputs.url }}" >> "$GITHUB_STEP_SUMMARY"
