name: Build → Staging → (Approval) → Prod  | backend-java

on:
  push:
    branches: [ "prod", "feature/DEV-5435-products" ]  # temporal para testing
  workflow_dispatch:              # permite correrlo a mano también

permissions:
  id-token: write
  contents: read

env:
  REGION: ${{ secrets.GCP_REGION }}
  AR_REPO: ${{ secrets.GCP_ARTIFACT_REPO }}
  SERVICE_NAME: backend-java

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-backend-java
  cancel-in-progress: false

jobs:
  build:
    name: Build & Push to TEST registry
    runs-on: ubuntu-latest
    environment: staging  # Necesita acceder a secretos de TEST/staging
    steps:
      - uses: actions/checkout@v4

      # Auth contra TEST (para publicar imagen)
      - name: Auth to GCP (TEST) via OIDC
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_TEST }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_TEST }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Docker auth to Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Compute image tag
        id: img
        run: |
          echo "image=${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_TEST }}/${{ env.AR_REPO }}/${{ env.SERVICE_NAME }}:${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Build & Push
        run: |
          docker build -t "${{ steps.img.outputs.image }}" .
          docker push "${{ steps.img.outputs.image }}"

  deploy_staging:
    name: Deploy to STAGING (kodehaus-test)
    needs: [build]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Auth to GCP (TEST) via OIDC
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_TEST }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_TEST }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy
        run: |
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_TEST }}/${{ env.AR_REPO }}/${{ env.SERVICE_NAME }}:${GITHUB_SHA}"
          gcloud run deploy "${{ env.SERVICE_NAME }}" \
            --image "$IMAGE" \
            --project "${{ secrets.GCP_PROJECT_ID_TEST }}" \
            --region "${{ env.REGION }}" \
            --platform managed \
            --service-account "run-backend-java@${{ secrets.GCP_PROJECT_ID_TEST }}.iam.gserviceaccount.com" \
            --allow-unauthenticated \
            --set-env-vars=GOOGLE_CLOUD_PROJECT=${{ secrets.GCP_PROJECT_ID_TEST }}

  promote_prod:
    name: Promote to PROD (approval gate)
    needs: [deploy_staging]
    runs-on: ubuntu-latest
    environment: production      # <— aquí GitHub pedirá aprobación del equipo
    steps:
      - name: Checkout (needed for docker context)
        uses: actions/checkout@v4

      - name: Auth to GCP (TEST) via OIDC for pulling image
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_TEST }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_TEST }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Docker auth to TEST registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Pull image from TEST
        run: |
          SRC="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_TEST }}/${{ env.AR_REPO }}/${{ env.SERVICE_NAME }}:${GITHUB_SHA}"
          docker pull "$SRC"

      - name: Auth to GCP (PROD) via OIDC for pushing and deploying
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_PROD }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT_PROD }}

      - name: Setup gcloud for PROD
        uses: google-github-actions/setup-gcloud@v2

      - name: Docker auth to PROD registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Tag and push image to PROD
        run: |
          SRC="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_TEST }}/${{ env.AR_REPO }}/${{ env.SERVICE_NAME }}:${GITHUB_SHA}"
          DST="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_PROD }}/${{ env.AR_REPO }}/${{ env.SERVICE_NAME }}:${GITHUB_SHA}"
          docker tag  "$SRC" "$DST"
          docker push "$DST"

      - name: Deploy to Cloud Run (PROD)
        run: |
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID_PROD }}/${{ env.AR_REPO }}/${{ env.SERVICE_NAME }}:${GITHUB_SHA}"
          gcloud run deploy "${{ env.SERVICE_NAME }}" \
            --image "$IMAGE" \
            --project "${{ secrets.GCP_PROJECT_ID_PROD }}" \
            --region "${{ env.REGION }}" \
            --platform managed \
            --service-account "run-backend-java@${{ secrets.GCP_PROJECT_ID_PROD }}.iam.gserviceaccount.com" \
            --allow-unauthenticated \
            --set-env-vars=GOOGLE_CLOUD_PROJECT=${{ secrets.GCP_PROJECT_ID_PROD }}
