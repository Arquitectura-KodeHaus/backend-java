name: CI/CD Cloud Run (staging → prod con aprobación) | backend-java

on:
  push:
    branches: [ "prod" ]          # tras merge a prod → se ejecuta
  pull_request:
    branches: [ "prod" ]          # los PR hacia prod también corren (solo a staging)
  workflow_dispatch:              # ejecutar manualmente si hace falta

permissions:
  id-token: write
  contents: read

# Evita carreras por rama/pipeline
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-backend-java
  cancel-in-progress: false

jobs:
  build_and_push_both:
    name: Build → push TEST (siempre) y PROD (solo en push)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- AUTH & PUSH A TEST (kodehaus-test / environment: staging) ----------
      - name: Auth to Google Cloud (TEST via OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}   # env: staging
          service_account:         ${{ vars.DEPLOY_SA }}            # env: staging
          project_id:              ${{ vars.GCP_PROJECT_ID }}       # env: staging

      - name: Set up gcloud (TEST)
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker (TEST)
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Build & Push image (TEST)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/backend-java:${{ github.sha }}
            ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/backend-java:staging

      # ---------- AUTH & PUSH A PROD (solo cuando es push, NO en PR) ----------
      - name: Auth to Google Cloud (PROD via OIDC)
        if: github.event_name == 'push'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_PROD }}   # env: production
          service_account:         ${{ vars.DEPLOY_SA }}                 # env: production
          project_id:              ${{ vars.GCP_PROJECT_ID }}            # env: production

      - name: Set up gcloud (PROD)
        if: github.event_name == 'push'
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker (PROD)
        if: github.event_name == 'push'
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Retag & Push image (PROD)
        if: github.event_name == 'push'
        run: |
          SRC="${{ vars.GCP_REGION }}-docker.pkg.dev/${{ env.TEST_PROJ || vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/backend-java:${{ github.sha }}"
          # reconstruimos sin repetir build usando cache del paso anterior
          docker pull ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/backend-java:${{ github.sha }} || true
          docker tag  ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/backend-java:${{ github.sha }} \
                      ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/backend-java:prod-${{ github.sha }}
          docker push ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/backend-java:prod-${{ github.sha }}

  deploy_staging:
    name: Deploy a STAGING (kodehaus-test)
    needs: [build_and_push_both]
    runs-on: ubuntu-latest
    environment: staging            # este environment NO debe requerir aprobación
    steps:
      - name: Auth to Google Cloud (TEST via OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}   # env: staging
          service_account:         ${{ vars.DEPLOY_SA }}            # env: staging
          project_id:              ${{ vars.GCP_PROJECT_ID }}       # env: staging

      - name: Deploy Cloud Run (staging)
        id: deploy_stg
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: backend-java
          image: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/backend-java:${{ github.sha }}
          region: ${{ vars.GCP_REGION }}
          # Puedes añadir flags extra (PUERTO, memoria, VPC, etc.)
          flags: >
            --allow-unauthenticated
            --service-account=${{ vars.RUNTIME_SA }}
            --set-env-vars=GOOGLE_CLOUD_PROJECT=${{ vars.GCP_PROJECT_ID }}

      - name: Smoke test (staging)
        shell: bash
        run: |
          URL="${{ steps.deploy_stg.outputs.url }}"
          echo "STAGING URL: $URL"
          # Para Spring Boot intenta primero /actuator/health, si no 200 prueba /
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/actuator/health" || true)
          if [ "$STATUS" != "200" ]; then
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/" || true)
          fi
          echo "HTTP status: $STATUS"
          if [ "$STATUS" != "200" ]; then
            echo "Smoke test falló en STAGING"
            exit 1
          fi
          echo "STAGING OK: $URL"

  deploy_production:
    name: Deploy a PRODUCCIÓN (requiere aprobación QA)
    needs: [deploy_staging]
    if: github.event_name == 'push'   # solo tras merge a prod, no en PR
    runs-on: ubuntu-latest
    environment: production           # <— configura este environment con "Required reviewers: QA"
    steps:
      - name: Auth to Google Cloud (PROD via OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER_PROD }}  # env: production
          service_account:         ${{ vars.DEPLOY_SA }}                # env: production
          project_id:              ${{ vars.GCP_PROJECT_ID }}           # env: production

      - name: Deploy Cloud Run (prod)
        id: deploy_prod
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: backend-java
          image: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.ARTIFACT_REPO }}/backend-java:prod-${{ github.sha }}
          region: ${{ vars.GCP_REGION }}
          flags: >
            --allow-unauthenticated
            --service-account=${{ vars.RUNTIME_SA }}
            --set-env-vars=GOOGLE_CLOUD_PROJECT=${{ vars.GCP_PROJECT_ID }}

      - name: Publica URL de producción
        run: echo "PROD URL: ${{ steps.deploy_prod.outputs.url }}" >> $GITHUB_STEP_SUMMARY
